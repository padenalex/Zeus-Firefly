package edu.sru.thangiah.zeus.metaheuristics.evolutionary.firefly;

import java.util.LinkedList;
import java.util.Random;
import java.util.Vector;

import edu.sru.thangiah.zeus.metaheuristics.evolutionary.Configuration;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.IChromosome;

import java.util.Collections;


public class FindNewEdge {

	private int SLindex; 
	private int SRindex;
	private Vector<Integer> nsLin = new Vector<Integer>();  // --> <--
	private Vector<Integer> nsRin = new Vector<Integer>();  // --> <--
	private Vector<Integer> nsLout = new Vector<Integer>(); // <-- -->
	private Vector<Integer> nsRout = new Vector<Integer>(); // <-- -->
	
	public FindNewEdge(IChromosome brightFly, IChromosome randomFly, Configuration configuration) {
		Random rand = new Random();
		int brightPos1 = 999999999;
		int brightPos2 = 999999999;
		int a1 = 999999998;
		int a2 = 999999998;
		int b1 = 999999999;
		int b2 = 999999999;
		int tspMax = configuration.getChromosomeSize()-1;  //Max tsp size in chromosome LL (#node -1 for start at 0) 
		int keepRunning = 1;
		int bIsflip = 0;
		int cIsflip = 0;
		
		//Generates 2 connected random positions that do not exist in both lists
		while(keepRunning == 1) {
			brightPos1 = rand.nextInt(tspMax) + 0;
			int nextOrprev = rand.nextInt(1) + 0;	
			//1 is next and 0 is prev
			if(nextOrprev == 0 && brightPos1 !=0) {brightPos2 = brightPos1-1;}
			else if(nextOrprev == 0 && brightPos1 == 0) {brightPos2 = brightPos1+1;}
			else if(nextOrprev == 1 && brightPos1 != tspMax) {brightPos2 = brightPos1+1;}
			else if(nextOrprev == 1 && brightPos1 == tspMax) {brightPos2 = brightPos1-1;}
			else {System.out.println("Error section #1 occured in findNewEdge of Firefly");}
		
			a1 = (int) brightFly.getGenes().get(brightPos1).getInternalValue();
			a2 = (int) brightFly.getGenes().get(brightPos2).getInternalValue();
			int tempPos = randomFly.findGenePos(a1);
			try {
			b1 = (int) randomFly.getGenes().get(tempPos-1).getInternalValue();
			b2 = (int) randomFly.getGenes().get(tempPos+1).getInternalValue();
			} catch(Exception e) {};
			
			if(a2 != b1 && a2!= b2) {keepRunning=0;}
				//System.out.println("still running");
			//Sets first pos to smaller one
		}
		
		if(brightPos1 > brightPos2) {
			int temp = brightPos1;
			brightPos1 = brightPos2;
			brightPos2 = temp;
			temp = a1;
			a1 = a2;
			a2 = temp;
			bIsflip = 1;
		}
		
		int currPos1 = randomFly.findGenePos(a1);
		int currPos2 = randomFly.findGenePos(a2);
		b1 = a1;
		b2 = a2;
		
		//Set currpos and curr position index (b1b2) to left or right
		if(currPos1 > currPos2) {
			int temp = currPos1;
			currPos1 = currPos2;
			currPos2 = temp;
			int temp1 = b1;
			b1 = b2;
			b2 = temp1;
		}
		
		
		System.out.println("best " + brightFly.toString());
		System.out.println("rand " + randomFly.toString());
		
		System.out.println("Bright Fly Positions: " + brightPos1 + " and " + brightPos2);
		System.out.println("Bright Fly Index Num: " + a1 + " and " + a2);
		
		System.out.println("Bright Fly Positions: " + currPos1 + " and " + currPos2);
		System.out.println("Bright Fly Index Num: " + b1 + " and " + b2);


		//a1 is the brightfly index
		//b1 is the currentfly index
		
		//Adds the first index
		this.nsLout.add(b1);
		this.nsRout.add(b2);
		
		while(randomFly.findGenePos(b1) != 0 && brightFly.findGenePos(a1) != 0) {
			int apos = brightFly.findGenePos(a1);
			int bpos = currFly.findGenePos(b1);
			int btemp = (int) brightFly.getGene(apos).getInternalValue();
			int ctemp = (int) randomFly.getGene(currPos1).getInternalValue();
			
			if(btemp == ctemp) {this.nsLout.add(ctemp);}
			else {break;}
		}
		
		
		//NodeSetin is just a reverse order of node set out
		this.nsLin = this.nsLout;
		this.nsRin = this.nsRout;
		Collections.reverse(this.nsLin);
		Collections.reverse(this.nsRin);
		
		
		System.out.println("node set left out is: " + this.nsLin);
		System.out.println("node set right out is: " + this.nsRin);
		System.out.println(this.nsLout);
		System.out.println(this.nsRout);

	}
}









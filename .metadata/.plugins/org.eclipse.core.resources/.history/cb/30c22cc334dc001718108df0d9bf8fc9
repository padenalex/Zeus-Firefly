package edu.sru.thangiah.zeus.metaheuristics.evolutionary.firefly;

import java.util.LinkedList;
import edu.sru.thangiah.zeus.core.Settings;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.Chromosome;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.Configuration;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.IChromosome;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.IFitnessFunction;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.IGene;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.IGeneticOperator;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.IntegerGene;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.Population;
import edu.sru.thangiah.zeus.metaheuristics.evolutionary.RandomGenerator;

public class FireFlyOperator implements IGeneticOperator
{
	private Configuration configuration;
	private int crossoverCount;
	
	public FireFlyOperator(Configuration currentConfiguration)
	{
		configuration = currentConfiguration;
		crossoverCount = 0;
	}
	
	@Override
	public void operate(Population pop)
	{
		operate(pop, pop.getChromosomes());
	}

	
	
	
	@Override
	public void operate(Population ogPop, LinkedList<IChromosome> ogPopLL){
		Settings.printDebug(Settings.COMMENT, "Into Operator");
		IFitnessFunction fitFunc = configuration.getFitnessFunction();
		//double test = fitnessFunction.evaluate(ogPopLL.getLast());

		int totalGen = configuration.getNumGenerations();
		int totalPop = configuration.getPopulationSize();
		int tspSize = configuration.getChromosomeSize();
		System.out.println(totalGen + " " + totalPop + " " + tspSize);
		
		LinkedList<IChromosome> newPopLL = (LinkedList<IChromosome>) ogPopLL.clone();
		
		
	}
	
	
	
	
	public Configuration getConfiguration(){ return configuration; }
}